name: CI Pipeline

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Timeout for the entire job
    container:
      image: 3.9.8-eclipse-temurin-17  # Use a Debian-based Maven with JDK 17 container
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lint Code
        run: mvn checkstyle:check
        continue-on-error: true

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots clean compile
        continue-on-error: true

      - name: Run tests with Maven
        run: mvn --batch-mode verify
        continue-on-error: true

      - name: Run JaCoCo Coverage
        run: mvn jacoco:report
        continue-on-error: true

      # Commenting out OWASP Dependency-Check for now
      # - name: OWASP Dependency-Check
      #   run: mvn org.owasp:dependency-check-maven:check
      #   continue-on-error: true

      - name: SonarQube Scan
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn sonar:sonar
        continue-on-error: true

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 60  # Timeout for the entire job
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image with Jib
        run: mvn compile com.google.cloud.tools:jib-maven-plugin:3.2.1:build -Dimage=dockerhub.com/anmobor/toni:latest

      - name: Push Docker image to Docker Hub
        run: docker push dockerhub.com/anmobor/toni:latest

  create-tag:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Get the latest tag
        id: get_latest_tag
        run: echo ::set-output name=tag::$(git describe --tags `git rev-list --tags --max-count=1`)

      - name: Bump the version
        id: bump_version
        run: |
          echo "Old tag: ${{ steps.get_latest_tag.outputs.tag }}"
          old_tag=${{ steps.get_latest_tag.outputs.tag }}
          new_tag=v$(echo $old_tag | awk -F. '{print $1 "." $2 "." $3+1}')
          echo "New tag: $new_tag"
          echo ::set-output name=new_tag::$new_tag

      - name: Create and push new tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git tag ${{ steps.bump_version.outputs.new_tag }}
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git ${{ steps.bump_version.outputs.new_tag }}

  scan-and-tag-docker:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Run Trivy Vulnerability Scanner
        run: |
          docker pull dockerhub.com/anmobor/toni:latest
          docker run --rm aquasec/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL dockerhub.com/anmobor/toni:latest
        continue-on-error: true

      - name: Tag Docker Image with GitHub SHA
        run: |
          docker tag dockerhub.com/anmobor/toni:latest dockerhub.com/anmobor/toni:${{ github.sha }}
        continue-on-error: true

      - name: Push Docker Tag
        run: |
          docker push dockerhub.com/anmobor/toni:${{ github.sha }}
        continue-on-error: true

  trufflehog-scan:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: success()
    timeout-minutes: 30  # Timeout for the entire job
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: TruffleHog Secret Scanning
        run: docker run --rm -v "${{ github.workspace }}:/workspace" trufflesecurity/trufflehog:latest filesystem /workspace --only-verified
        continue-on-error: true