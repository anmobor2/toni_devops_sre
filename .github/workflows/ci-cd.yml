name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and analyze
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Timeout for the entire job
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Lint Code
        run: ./mvnw checkstyle:check
        continue-on-error: true
      - name: Build with Maven
        run: ./mvnw --batch-mode --update-snapshots clean compile
        continue-on-error: true
      - name: Run tests with Maven
        run: ./mvnw --batch-mode verify
        continue-on-error: true
      - name: Run JaCoCo Coverage
        run: ./mvnw jacoco:report
        continue-on-error: true
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./mvnw -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=anmobor2_toni_devops_sre

  build-and-push-docker:
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 3  # Timeout for the entire job
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build Docker image with Jib
        run: ./mvnw compile com.google.cloud.tools:jib-maven-plugin:3.2.1:build -Dimage=docker.io/anmobor/toni:latest

  scan-and-tag-docker:
    timeout-minutes: 3
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Run Trivy Vulnerability Scanner
        run: |
          docker pull docker.io/anmobor/toni:latest
          docker run --rm aquasec/trivy:latest image --exit-code 1 --severity HIGH,CRITICAL docker.io/anmobor/toni:latest
        continue-on-error: true

      - name: Check if Docker image exists
        id: check-image
        run: |
          image_exists=$(curl -s -H "Accept: application/vnd.docker.distribution.manifest.v2+json" -f https://docker.io/v2/anmobor/toni/manifests/latest 2>/dev/null | grep -c 'Docker-Content-Digest')
          echo "::set-output name=exists::$image_exists"  

      - name: Pull Docker image
        if: steps.check-image.outputs.exists == '1'
        run: docker pull docker.io/anmobor/toni:latest

      - name: Build Docker image
        if: steps.check-image.outputs.exists == '0'
        run: |
          docker build -t docker.io/anmobor/toni:latest .
          docker push docker.io/anmobor/toni:latest
        continue-on-error: true

  trufflehog-scan: # Secrets Scanning
    runs-on: ubuntu-latest
    needs: scan-and-tag-docker
    if: success()
    timeout-minutes: 3  # Timeout for the entire job
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: TruffleHog Secret Scanning
        run: docker run --rm -v "${{ github.workspace }}:/workspace" trufflesecurity/trufflehog:latest filesystem /workspace --only-verified
        continue-on-error: true

  deploy-to-kubernetes:
    runs-on: ubuntu-latest
    needs: build-and-push-docker
    if: success()
    timeout-minutes: 5  # Timeout for the entire job
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up kubectl
        uses: azure/setup-kubectl@v1
        with:
          version: 'latest'
      - name: Set up Helm
        uses: azure/setup-helm@v1
      - name: Package and Push Helm Chart
        env:
          HELM_REGISTRY: ${{ secrets.HELM_REGISTRY }}
          HELM_USERNAME: ${{ secrets.HELM_USERNAME }}
          HELM_PASSWORD: ${{ secrets.HELM_PASSWORD }}
        run: |
          helm package hello-world-chart
          helm registry login ${{ secrets.HELM_REGISTRY }} --username ${{ secrets.HELM_USERNAME }} --password ${{ secrets.HELM_PASSWORD }}
          helm push hello-world-chart-*.tgz oci://${{ secrets.HELM_REGISTRY }}/my-charts
      - name: Deploy to Kubernetes
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          echo "${{ secrets.KUBE_CONFIG_DATA }}" | base64 --decode > kubeconfig
          export KUBECONFIG=kubeconfig
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            helm upgrade --install my-release oci://${{ secrets.HELM_REGISTRY }}/my-charts/hello-world-chart --set image.tag=${{ steps.tagging.outputs.new_tag }} --namespace production --create-namespace
          else
            helm upgrade --install my-release oci://${{ secrets.HELM_REGISTRY }}/my-charts/hello-world-chart --set image.tag=${{ steps.tagging.outputs.new_tag }} --namespace staging --create-namespace
          fi
        continue-on-error: true